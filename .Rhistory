theme_bw()+
labs(x="Target position",y="Genome position")+
ggtitle(unique(temp$qseqid))
if(nrow(introns)>0){
p<-p+geom_rect(data=introns,
aes(xmin=-Inf,xmax=Inf,ymin=shift_sstart,ymax=shift_send),
colour="darkgreen",alpha=0.05,size=NA)+
geom_label_repel(data=introns,
aes(x=qpos,
y=shift_sstart-(intron/2),
label=intron),fill="white",
force_pull = 0.1,
size=2,
min.segment.length=unit(5,"mm"),
box.padding = 0.05)
}
print(p)
}
dev.off()
p<-p+geom_rect(data=introns,
aes(xmin=-Inf,xmax=Inf,ymin=shift_sstart,ymax=shift_send),
colour="darkgreen",alpha=0.05,size=NA)+
geom_label_repel(data=introns,
aes(x=qpos,
y=shift_sstart-(intron/2),
label=intron),fill="white",
force_pull = 0.1,
size=2,
min.segment.length=unit(5,"mm"),
box.padding = 0.05,label.padding=0.05)
if(nrow(introns)>0){
p<-p+geom_rect(data=introns,
aes(xmin=-Inf,xmax=Inf,ymin=shift_sstart,ymax=shift_send),
colour="darkgreen",alpha=0.05,size=NA)+
geom_label_repel(data=introns,
aes(x=qpos,
y=shift_sstart-(intron/2),
label=intron),fill="white",
force_pull = 0.1,
size=2,
min.segment.length=unit(5,"mm"),
box.padding = 0.05,label.padding=0.05)
}
print(p)
pdf("ggplot_segments_Rgrier.pdf",width=10)
for(i in unique(rhodo_mm$qseqid)[1:10]){
temp<-rhodo_mm %>% filter(qseqid==i)
introns <-  temp %>% group_by(qseqid,sseqid)%>%
mutate(p_sstart=ifelse(sstart<send,sstart,send),
p_send=ifelse(p_sstart==sstart,send,sstart),
orientation=ifelse(p_sstart==sstart,"forward","reverse"))%>%
arrange(p_sstart,.by_group = TRUE) %>%
summarise(shift_sstart=c(p_sstart,NA),shift_send=c(NA,p_send),
intron=(shift_sstart-shift_send),
qpos=c(NA,qend),shift_qstart=c(qstart,NA),
orientation=c(orientation,NA),
.groups = "keep")%>%
filter(intron>1000,intron<1e6)%>%
na.exclude()
p<-ggplot(temp)+
geom_segment(aes(y=sstart,yend=send,x=qstart,xend=qend,colour=sseqid),
show.legend = FALSE)+
facet_wrap(~sseqid,scales = "free")+
xlim(c(0,unique(temp$qlen)))+
theme_bw()+
labs(x="Target position",y="Genome position")+
ggtitle(unique(temp$qseqid))
if(nrow(introns)>0){
p<-p+geom_rect(data=introns,
aes(xmin=-Inf,xmax=Inf,ymin=shift_sstart,ymax=shift_send),
colour="darkgreen",alpha=0.05,size=NA)+
geom_label_repel(data=introns,
aes(x=qpos,
y=shift_sstart-(intron/2),
label=intron),fill="white",
force_pull = 0.1,
size=2,
min.segment.length=unit(5,"mm"),
box.padding = 0.05,label.padding=0.05)
}
print(p)
}
dev.off()
dev.off()
pdf("ggplot_segments_Rgrier.pdf",width=10)
for(i in unique(rhodo_mm$qseqid)){
temp<-rhodo_mm %>% filter(qseqid==i)
introns <-  temp %>% group_by(qseqid,sseqid)%>%
mutate(p_sstart=ifelse(sstart<send,sstart,send),
p_send=ifelse(p_sstart==sstart,send,sstart),
orientation=ifelse(p_sstart==sstart,"forward","reverse"))%>%
arrange(p_sstart,.by_group = TRUE) %>%
summarise(shift_sstart=c(p_sstart,NA),shift_send=c(NA,p_send),
intron=(shift_sstart-shift_send),
qpos=c(NA,qend),shift_qstart=c(qstart,NA),
orientation=c(orientation,NA),
.groups = "keep")%>%
filter(intron>1000,intron<1e6)%>%
na.exclude()
p<-ggplot(temp)+
geom_segment(aes(y=sstart,yend=send,x=qstart,xend=qend,colour=sseqid),
show.legend = FALSE)+
facet_wrap(~sseqid,scales = "free")+
xlim(c(0,unique(temp$qlen)))+
theme_bw()+
labs(x="Target position",y="Genome position")+
ggtitle(unique(temp$qseqid))
if(nrow(introns)>0){
p<-p+geom_rect(data=introns,
aes(xmin=-Inf,xmax=Inf,ymin=shift_sstart,ymax=shift_send),
colour="darkgreen",alpha=0.05,size=NA)+
geom_label_repel(data=introns,
aes(x=qpos,
y=shift_sstart-(intron/2),
label=intron),fill="white",
force_pull = 0.1,
size=2,
min.segment.length=unit(5,"mm"),
box.padding = 0.05,label.padding=0.07,
label.r=0.01)
}
print(p)
}
dev.off()
temp
min_fragment_length=100
max_intron_length=1000
### create filtering data.frame
introns_out<-data.frame()
min_fragment_length=100
max_intron_length=1000
for(i in unique(rhodo_mm$qseqid)[1:10]){
temp<-dat %>%
filter(qseqid==i,
length >= min_fragment_length)
introns <-  temp %>% group_by(qseqid,sseqid)%>%
mutate(p_sstart=ifelse(sstart<send,sstart,send),
p_send=ifelse(p_sstart==sstart,send,sstart),
orientation=ifelse(p_sstart==sstart,"forward","reverse"))%>%
arrange(p_sstart,.by_group = TRUE) %>%
summarise(shift_sstart=c(p_sstart,NA),shift_send=c(NA,p_send),
intron_length=(shift_sstart-shift_send),
orientation=c(orientation,NA),
.groups = "keep")%>%
na.exclude() %>%
select(qseqid,sseqid,intron_length)
## write to data.frame
introns_out<-rbind(introns_out,introns)
introns %>%
filter(intron_length>max_intron_length)
}
for(i in unique(rhodo_mm$qseqid)[1:10]){
temp<-rhodo_mm %>%
filter(qseqid==i,
length >= min_fragment_length)
introns <-  temp %>% group_by(qseqid,sseqid)%>%
mutate(p_sstart=ifelse(sstart<send,sstart,send),
p_send=ifelse(p_sstart==sstart,send,sstart),
orientation=ifelse(p_sstart==sstart,"forward","reverse"))%>%
arrange(p_sstart,.by_group = TRUE) %>%
summarise(shift_sstart=c(p_sstart,NA),shift_send=c(NA,p_send),
intron_length=(shift_sstart-shift_send),
orientation=c(orientation,NA),
.groups = "keep")%>%
na.exclude() %>%
select(qseqid,sseqid,intron_length)
## write to data.frame
introns_out<-rbind(introns_out,introns)
introns %>%
filter(intron_length>max_intron_length)
}
introns_out
introns_flag_out<-data.frame()
for(i in unique(rhodo_mm$qseqid)[1:10]){
temp<-rhodo_mm %>%
filter(qseqid==i,
length >= min_fragment_length)
introns <-  temp %>% group_by(qseqid,sseqid)%>%
mutate(p_sstart=ifelse(sstart<send,sstart,send),
p_send=ifelse(p_sstart==sstart,send,sstart),
orientation=ifelse(p_sstart==sstart,"forward","reverse"))%>%
arrange(p_sstart,.by_group = TRUE) %>%
summarise(shift_sstart=c(p_sstart,NA),shift_send=c(NA,p_send),
intron_length=(shift_sstart-shift_send),
orientation=c(orientation,NA),
.groups = "keep")%>%
na.exclude() %>%
select(qseqid,sseqid,intron_length)
## write to data.frame
introns_out<-rbind(introns_out,introns)
introns_flag<-introns %>%
filter(intron_length>=max_intron_length)%>%
select(qseqid)%>%unique()
introns_flag_out<-rbind(introns_flag_out,introns_flag)
}
introns_flag
introns_flag<-introns %>%
filter(intron_length>=max_intron_length)%>%
ungroup()%>%
select(qseqid)%>%unique()
introns_flag_out<-rbind(introns_flag_out,introns_flag)
min_fragment_length=100
max_intron_length=1000
### create filtering data.frame
introns_out<-data.frame()
introns_flag_out<-data.frame()
for(i in unique(rhodo_mm$qseqid)[1:10]){
temp<-rhodo_mm %>%
filter(qseqid==i,
length >= min_fragment_length)
introns <-  temp %>% group_by(qseqid,sseqid)%>%
mutate(p_sstart=ifelse(sstart<send,sstart,send),
p_send=ifelse(p_sstart==sstart,send,sstart),
orientation=ifelse(p_sstart==sstart,"forward","reverse"))%>%
arrange(p_sstart,.by_group = TRUE) %>%
summarise(shift_sstart=c(p_sstart,NA),shift_send=c(NA,p_send),
intron_length=(shift_sstart-shift_send),
orientation=c(orientation,NA),
.groups = "keep")%>%
na.exclude() %>%
select(qseqid,sseqid,intron_length)
## write to data.frame
introns_out<-rbind(introns_out,introns)
introns_flag<-introns %>%
filter(intron_length>=max_intron_length)%>%
ungroup()%>%
select(qseqid)%>%unique()
introns_flag_out<-rbind(introns_flag_out,introns_flag)
}
introns_out
introns_flag_out
## find same-chromosome paralogs
for(i in unique(rhodo_mm$qseqid)[129]){
temp<-rhodo_mm %>%
filter(qseqid==i,
length >= min_fragment_length)
## write to data.frame
introns_out<-rbind(introns_out,introns)
}
temp
temp<-rhodo_mm %>%
filter(qseqid==i,
length >= min_fragment_length)%>%
arrange(qstart)
temp
temp<-rhodo_mm %>%
filter(qseqid==i)%>%
arrange(qstart)
temp
for(m in unique(temp$sseqid)){
temp2<-temp %>% filter(sseqid==m)
target_seq<-seq(1:unique(temp2$qlen))
}
target_seq
for(m in unique(temp$sseqid)){
temp2<-temp %>% filter(sseqid==m)
target_seq<-seq(1:unique(temp2$qlen))
for(f in 1:nrow(temp2)){
target_seq<-c(target_seq,seq(temp2[f,"qstart"],temp2[f,"qend"]))
}
}
seq(temp2[f,"qstart"],temp2[f,"qend"])
temp2
seq(temp2[f,"qstart"],temp2[f,"qend"])
temp2[f,"qstart"]
for(m in unique(temp$sseqid)){
temp2<-temp %>% filter(sseqid==m)
target_seq<-seq(1:unique(temp2$qlen))
for(f in 1:nrow(temp2)){
target_seq<-c(target_seq,seq(temp2[f,]$qstart,temp2[f,]$qend))
}
}
table(target_seq)
table(target_seq)[table(target_seq)>1]
temp
temp2
for(m in unique(temp$sseqid)){
temp2<-temp %>% filter(sseqid==m)
print(temp2)
target_seq<-seq(1:unique(temp2$qlen))
for(f in 1:nrow(temp2)){
target_seq<-c(target_seq,seq(temp2[f,]$qstart,temp2[f,]$qend))
}
same_chrom_overlap<-length(table(target_seq)[table(target_seq)>1])/unique(temp2$qlen)
data.frame(sseqid=unique(temp2$sseqid),qseqid=1)
}
same_chrom_overlap_df<-data.frame(sseqid=unique(temp2$sseqid),
qseqid=unique(temp2$qseqid),
same_chrom_overlap=same_chrom_overlap)
same_chrom_overlap_df
same_chrom_overlap
length(table(target_seq)[table(target_seq)>1])/unique(temp2$qlen)
unique(temp2$qlen)
temp2
length(table(target_seq)[table(target_seq)>1])/unique(temp2$qlen)
for(m in unique(temp$sseqid)){
temp2<-temp %>% filter(sseqid==m)
print(temp2)
for(f in 1:nrow(temp2)){
target_seq<-c(seq(1:unique(temp2$qlen)),seq(temp2[f,]$qstart,temp2[f,]$qend))
}
same_chrom_overlap<-length(table(target_seq)[table(target_seq)>1])/unique(temp2$qlen)
same_chrom_overlap_df<-data.frame(sseqid=unique(temp2$sseqid),
qseqid=unique(temp2$qseqid),
same_chrom_overlap=same_chrom_overlap)
}
same_chrom_overlap_df
temp2
target_seq
(target_seq)
table(target_seq)
table(target_seq)[table(target_seq)>1]
target_seq<-c(seq(1:unique(temp2$qlen)),seq(temp2[f,]$qstart,temp2[f,]$qend))
table(target_seq)[table(target_seq)>1]
## find same-chromosome paralogs
for(i in unique(rhodo_mm$qseqid)[129]){
temp<-rhodo_mm %>%
filter(qseqid==i)%>%
arrange(qstart)
temp
for(m in unique(temp$sseqid)){
temp2<-temp %>% filter(sseqid==m)
print(temp2)
for(f in 1:nrow(temp2)){
target_seq<-c(seq(1:unique(temp2$qlen)),seq(temp2[f,]$qstart,temp2[f,]$qend))
}
print(table(target_seq)[table(target_seq)>1])
same_chrom_overlap<-length(table(target_seq)[table(target_seq)>1])/unique(temp2$qlen)
same_chrom_overlap_df<-data.frame(sseqid=unique(temp2$sseqid),
qseqid=unique(temp2$qseqid),
same_chrom_overlap=same_chrom_overlap)
}
## write to data.frame
}
temp
table(target_seq)
## find same-chromosome paralogs
for(i in unique(rhodo_mm$qseqid)[127]){
temp<-rhodo_mm %>%
filter(qseqid==i)%>%
arrange(qstart)
temp
for(m in unique(temp$sseqid)){
print(m)
temp2<-temp %>% filter(sseqid==m)
print(temp2)
for(f in 1:nrow(temp2)){
target_seq<-c(seq(1:unique(temp2$qlen)),seq(temp2[f,]$qstart,temp2[f,]$qend))
}
print(table(target_seq)[table(target_seq)>1])
same_chrom_overlap<-length(table(target_seq)[table(target_seq)>1])/unique(temp2$qlen)
same_chrom_overlap_df<-data.frame(sseqid=unique(temp2$sseqid),
qseqid=unique(temp2$qseqid),
same_chrom_overlap=same_chrom_overlap)
}
## write to data.frame
}
View(target_seq)
## find same-chromosome paralogs
for(i in unique(rhodo_mm$qseqid)[127]){
temp<-rhodo_mm %>%
filter(qseqid==i)%>%
arrange(qstart)
temp
for(m in unique(temp$sseqid)){
print(m)
temp2<-temp %>% filter(sseqid==m)
print(temp2)
target_seq<-seq(1:unique(temp2$qlen))
for(f in 1:nrow(temp2)){
target_seq<-c(target_seq,seq(temp2[f,]$qstart,temp2[f,]$qend))
}
print(table(target_seq)[table(target_seq)>1])
same_chrom_overlap<-length(table(target_seq)[table(target_seq)>1])/unique(temp2$qlen)
same_chrom_overlap_df<-data.frame(sseqid=unique(temp2$sseqid),
qseqid=unique(temp2$qseqid),
same_chrom_overlap=same_chrom_overlap)
}
## write to data.frame
}
same_chrom_overlap_df
## find same-chromosome paralogs
for(i in unique(rhodo_mm$qseqid)[127]){
temp<-rhodo_mm %>%
filter(qseqid==i)%>%
arrange(qstart)
temp
for(m in unique(temp$sseqid)){
print(m)
temp2<-temp %>% filter(sseqid==m)
print(temp2)
target_seq<-seq(1:unique(temp2$qlen))
for(f in 1:nrow(temp2)){
target_seq<-c(target_seq,seq(temp2[f,]$qstart,temp2[f,]$qend))
}
print(table(target_seq)[table(target_seq)>1])
same_chrom_overlap<-length(table(target_seq)[table(target_seq)>2])/unique(temp2$qlen)
same_chrom_overlap_df<-data.frame(sseqid=unique(temp2$sseqid),
qseqid=unique(temp2$qseqid),
same_chrom_overlap=same_chrom_overlap)
}
## write to data.frame
}
same_chrom_overlap_df
## find same-chromosome paralogs
same_chrom_overlap_df<-data.frame()
for(i in unique(rhodo_mm$qseqid)[120:129]){
temp<-rhodo_mm %>%
filter(qseqid==i)%>%
arrange(qstart)
temp
for(m in unique(temp$sseqid)){
print(m)
temp2<-temp %>% filter(sseqid==m)
print(temp2)
target_seq<-seq(1:unique(temp2$qlen))
for(f in 1:nrow(temp2)){
target_seq<-c(target_seq,seq(temp2[f,]$qstart,temp2[f,]$qend))
}
print(table(target_seq)[table(target_seq)>1])
same_chrom_overlap<-length(table(target_seq)[table(target_seq)>2])/unique(temp2$qlen)
same_chrom_overlap_df<-rbind(same_chrom_overlap_df,
data.frame(sseqid=unique(temp2$sseqid),
qseqid=unique(temp2$qseqid),
same_chrom_overlap=same_chrom_overlap))
}
## write to data.frame
}
same_chrom_overlap_df
## find same-chromosome paralogs
coverage_summary<-data.frame()
for(i in unique(rhodo_mm$qseqid)[120:129]){
temp<-rhodo_mm %>%
filter(qseqid==i)%>%
arrange(qstart)
temp
for(m in unique(temp$sseqid)){
# print(m)
temp2<-temp %>% filter(sseqid==m)
print(temp2)
target_seq<-seq(1:unique(temp2$qlen))
for(f in 1:nrow(temp2)){
target_seq<-c(target_seq,seq(temp2[f,]$qstart,temp2[f,]$qend))
}
# print(table(target_seq)[table(target_seq)>1])
same_chrom_overlap<-length(table(target_seq)[table(target_seq)>2])/unique(temp2$qlen)
full_coverage<-length(table(target_seq)[table(target_seq)>1])/unique(temp2$qlen)
unique_coverage<-length(table(target_seq)[table(target_seq)==2])/unique(temp2$qlen)
coverage_summary<-rbind(coverage_summary,
data.frame(sseqid=unique(temp2$sseqid),
qseqid=unique(temp2$qseqid),
same_chromosome_overlap=same_chrom_overlap,
full_coverage=full_coverage,
unique_coverage=unique_coverage))
}
## write to data.frame
}
## find same-chromosome paralogs
coverage_summary<-data.frame()
for(i in unique(rhodo_mm$qseqid)[120:129]){
temp<-rhodo_mm %>%
filter(qseqid==i)%>%
arrange(qstart)
temp
for(m in unique(temp$sseqid)){
# print(m)
temp2<-temp %>% filter(sseqid==m)
# print(temp2)
target_seq<-seq(1:unique(temp2$qlen))
for(f in 1:nrow(temp2)){
target_seq<-c(target_seq,seq(temp2[f,]$qstart,temp2[f,]$qend))
}
# print(table(target_seq)[table(target_seq)>1])
same_chrom_overlap<-length(table(target_seq)[table(target_seq)>2])/unique(temp2$qlen)
full_coverage<-length(table(target_seq)[table(target_seq)>1])/unique(temp2$qlen)
unique_coverage<-length(table(target_seq)[table(target_seq)==2])/unique(temp2$qlen)
coverage_summary<-rbind(coverage_summary,
data.frame(sseqid=unique(temp2$sseqid),
qseqid=unique(temp2$qseqid),
same_chromosome_overlap=same_chrom_overlap,
full_coverage=full_coverage,
unique_coverage=unique_coverage))
}
## write to data.frame
}
coverage_summary
table(target_seq)-1
introns
introns_flag<-introns %>%
filter(intron_length>=max_intron_length)%>%
ungroup()%>%
summarise(sum_introns=sum(intron_length),qlen=unique(qlen))
introns_flag<-introns %>%
filter(intron_length>=max_intron_length)%>%
ungroup()%>%
summarise(sum_introns=sum(intron_length))
introns_flag<-introns %>%
filter(intron_length>=max_intron_length)%>%
ungroup()%>%
summarise(sum_introns=sum(intron_length))%>%
select(qseqid)%>%unique()
introns %>%
filter(intron_length>=max_intron_length)%>%
ungroup()
introns %>%
filter(intron_length>=max_intron_length)%>%
ungroup()%>%
summarise(sum_introns=sum(intron_length))
introns %>%
filter(intron_length>=max_intron_length)%>%
ungroup()%>%
mutate(sum_introns=sum(intron_length))
